<?php

namespace {{ namespace }}\Form{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

{% block use_statements %}
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
{% if not configure_options_available %}
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
{% endif %}
use Symfony\Component\OptionsResolver\OptionsResolver;
{% endblock use_statements %}

{% block class_definition %}
class {{ form_class }} extends AbstractType
{% endblock class_definition %}
{
{% block class_body %}
    {%- if fields|length > 0 %}
    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder

        {%- for field in fields %}
            {%- if field.type in ['datetime', 'datetimetz'] %}

            ->add('{{ field.fieldName }}', \SC\DatetimepickerBundle\Form\Type\SCDatetimeType::class, array('pickerOptions' =>
                array(
                    'format' => 'mm/dd/yyyy HH:ii',
                )))
            {%- elseif field.type in ['date'] %}

            ->add('{{ field.fieldName }}', \SC\DatetimepickerBundle\Form\Type\SCDatetimeType::class, array('pickerOptions' =>
                array(
                    'format' => 'mm/dd/yyyy',
                )))
            {%- elseif field.type in ['time'] %}

            ->add('{{ field.fieldName }}', \SC\DatetimepickerBundle\Form\Type\SCDatetimeType::class, array('pickerOptions' =>
                array(
                    'format' => 'HH:ii',
                )))
            {%- else %}

            ->add('{{ field.fieldName }}')
            {%- endif %}    
        {%- endfor %}
        {%- for fieldName, field in associations %}

            ->add('{{ fieldName }}', \MWSimple\Bundle\AdminCrudBundle\Form\Type\Select2entityType::class, array(
                'class' => '{{ field.targetEntity }}',
                'url'   => '{{ entity_class }}_autocomplete_{{ fieldName }}',
                'configs' => array(
                    {%- if field.type in [1, 2, 3] %}

                    'multiple' => false,//required true or false
                    {%- else %}

                    'multiple' => true,//required true or false
                    {%- endif %}

                    'width'    => 'off',
                ),
                'attr' => array(
                    'class' => "col-lg-12 col-md-12 col-sm-12 col-xs-12",
                )
            ))
        {%- endfor %}

        ;
    }
    {% endif %}

    {%- if not configure_options_available %}

    /**
     * Sets the default options for this type.
     *
     * This method should be removed when upgrading to Symfony 2.7.
     *
     * @param OptionsResolverInterface $resolver
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $this->configureOptions($resolver);
    }
    {% endif %}

    /**
     * @param OptionsResolver $resolver
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => '{{ namespace }}\Entity{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\{{ entity_class }}'
        ));
    }

    {%- if get_name_required %}

    /**
     * @return string
     */
    public function getName()
    {
        return '{{ form_type_name }}';
    }
    {% endif %}

{% endblock class_body %}
}
